package view;

import controller.InitMenuController;
import controller.ProfileController;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.NoSuchElementException;
import java.util.Scanner;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.Comment;
import model.Message;
import model.Post;
import model.Profile;

/**
 *
 * @author Bilo Alejandro Martins Gonzalez, Pedro Sanchez Castejón
 */
public class GUIProfileMenu extends javax.swing.JFrame implements ProfileView {

    /**
     * El formato de la fecha
     */
    private SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy 'ás' HH:mm:ss");
    /**
     * Los posts a visualizar
     */
    private int postsShowed = 10;

    /**
     * Mantiene la referencia al objecto controlador (ProfileController)
     */
    private ProfileController profileController;

    /**
     * Este constructor se inicia pasando como parametro el objeto "profile
     * controler" para que la interfaz tenga interacción y comunicación con las
     * demas clases
     *
     * @param profileController mantiene la referencia al objecto controlador
     * (ProfileController)
     */
    public GUIProfileMenu(ProfileController profileController) {
        initComponents();
        this.setResizable(false);
        this.profileController = profileController;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        lblPerfilDoUsuario = new javax.swing.JLabel();
        lblLogoTacebook = new javax.swing.JLabel();
        lblEstadoActual = new javax.swing.JLabel();
        btnCambiarEstado = new javax.swing.JButton();
        btnPecharSesion = new javax.swing.JButton();
        tabbedPaneMenu = new javax.swing.JTabbedPane();
        splitPaneBiografia = new javax.swing.JSplitPane();
        panelComentarios = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        panelBiografia = new javax.swing.JPanel();
        lblUltimasPublicacions = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableBiografia = new javax.swing.JTable();
        btnNovaPublicacion = new javax.swing.JButton();
        btnGustame = new javax.swing.JButton();
        btnVerPublicacionesAnteriores = new javax.swing.JButton();
        btnComentar = new javax.swing.JButton();
        SplitPaneAmigos = new javax.swing.JSplitPane();
        panelSolicitudesAmizade = new javax.swing.JPanel();
        lblSolicitudesAmizade = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        listaSolicitudesAmizade = new javax.swing.JList<>();
        btnAceptarSolicitude = new javax.swing.JButton();
        btnNovaSolicitude = new javax.swing.JButton();
        btnRexeitarSolicitude = new javax.swing.JButton();
        panelSuperiorAmigos = new javax.swing.JPanel();
        lblListaDeAmigos = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tablaListaAmigos = new javax.swing.JTable();
        btnVerBiografia = new javax.swing.JButton();
        btnEnviarMensaxePrivada = new javax.swing.JButton();
        panelMensaxesPrivadas = new javax.swing.JPanel();
        lblMensaxesPrivadas = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tablaMensajes = new javax.swing.JTable();
        btnEliminarMensaxe = new javax.swing.JButton();
        btnLerMensaxe = new javax.swing.JButton();

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(jList1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblPerfilDoUsuario.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/user-1633249_640.png"))); // NOI18N
        lblPerfilDoUsuario.setText("Perfil do usuario: ");

        lblLogoTacebook.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/tacebook-logo.jpg"))); // NOI18N

        lblEstadoActual.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/anatomy-2952567_640.png"))); // NOI18N
        lblEstadoActual.setText("Estado actual: ");

        btnCambiarEstado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/anatomy-2952567_640.png"))); // NOI18N
        btnCambiarEstado.setText("Cambiar estado");
        btnCambiarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarEstadoActionPerformed(evt);
            }
        });

        btnPecharSesion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/exit-97636_640.png"))); // NOI18N
        btnPecharSesion.setText("Pechar sesión");
        btnPecharSesion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPecharSesionActionPerformed(evt);
            }
        });

        splitPaneBiografia.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jLabel2.setText("Comentarios:");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Texto", "De", "Data"
            }
        ));
        jScrollPane3.setViewportView(jTable2);

        javax.swing.GroupLayout panelComentariosLayout = new javax.swing.GroupLayout(panelComentarios);
        panelComentarios.setLayout(panelComentariosLayout);
        panelComentariosLayout.setHorizontalGroup(
            panelComentariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelComentariosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelComentariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, panelComentariosLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 959, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelComentariosLayout.setVerticalGroup(
            panelComentariosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelComentariosLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        splitPaneBiografia.setRightComponent(panelComentarios);

        lblUltimasPublicacions.setText("10 últimas publicacións");

        tableBiografia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Data", "Autor", "Texto", "Me gustas"
            }
        ));
        tableBiografia.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(tableBiografia);
        tableBiografia.getAccessibleContext().setAccessibleDescription("");

        btnNovaPublicacion.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/post-it-150262_640.png"))); // NOI18N
        btnNovaPublicacion.setText("Nova publicación");
        btnNovaPublicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaPublicacionActionPerformed(evt);
            }
        });

        btnGustame.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/facebook-295478_640.png"))); // NOI18N
        btnGustame.setText("Gústame");
        btnGustame.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGustameActionPerformed(evt);
            }
        });

        btnVerPublicacionesAnteriores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icon-1970474_640.png"))); // NOI18N
        btnVerPublicacionesAnteriores.setText("Ver anteriores publicacións");
        btnVerPublicacionesAnteriores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerPublicacionesAnterioresActionPerformed(evt);
            }
        });

        btnComentar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/speech-bubbles-303206_640.png"))); // NOI18N
        btnComentar.setText("Comentar");
        btnComentar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnComentarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBiografiaLayout = new javax.swing.GroupLayout(panelBiografia);
        panelBiografia.setLayout(panelBiografiaLayout);
        panelBiografiaLayout.setHorizontalGroup(
            panelBiografiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBiografiaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBiografiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(panelBiografiaLayout.createSequentialGroup()
                        .addComponent(lblUltimasPublicacions)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBiografiaLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnNovaPublicacion)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnComentar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnGustame)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnVerPublicacionesAnteriores)
                .addGap(162, 162, 162))
        );
        panelBiografiaLayout.setVerticalGroup(
            panelBiografiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBiografiaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblUltimasPublicacions)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelBiografiaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnNovaPublicacion)
                    .addComponent(btnVerPublicacionesAnteriores)
                    .addComponent(btnGustame)
                    .addComponent(btnComentar))
                .addContainerGap())
        );

        splitPaneBiografia.setTopComponent(panelBiografia);

        tabbedPaneMenu.addTab("Biografía", new javax.swing.ImageIcon(getClass().getResource("/assets/post-it-150262_640.png")), splitPaneBiografia); // NOI18N

        SplitPaneAmigos.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        lblSolicitudesAmizade.setText("Tes solicitudes dos seguintes perfís:");

        listaSolicitudesAmizade.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane5.setViewportView(listaSolicitudesAmizade);

        btnAceptarSolicitude.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/accept.png"))); // NOI18N
        btnAceptarSolicitude.setText("Aceptar solicitude");
        btnAceptarSolicitude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarSolicitudeActionPerformed(evt);
            }
        });

        btnNovaSolicitude.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/handshake-152812_640.png"))); // NOI18N
        btnNovaSolicitude.setText("Nova solicitude de amizade");
        btnNovaSolicitude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaSolicitudeActionPerformed(evt);
            }
        });

        btnRexeitarSolicitude.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/reject.png"))); // NOI18N
        btnRexeitarSolicitude.setText("Rexeitar solicitude");
        btnRexeitarSolicitude.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRexeitarSolicitudeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSolicitudesAmizadeLayout = new javax.swing.GroupLayout(panelSolicitudesAmizade);
        panelSolicitudesAmizade.setLayout(panelSolicitudesAmizadeLayout);
        panelSolicitudesAmizadeLayout.setHorizontalGroup(
            panelSolicitudesAmizadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSolicitudesAmizadeLayout.createSequentialGroup()
                .addComponent(lblSolicitudesAmizade)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jScrollPane5)
            .addGroup(panelSolicitudesAmizadeLayout.createSequentialGroup()
                .addGap(199, 199, 199)
                .addComponent(btnAceptarSolicitude)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRexeitarSolicitude)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNovaSolicitude)
                .addContainerGap(113, Short.MAX_VALUE))
        );
        panelSolicitudesAmizadeLayout.setVerticalGroup(
            panelSolicitudesAmizadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSolicitudesAmizadeLayout.createSequentialGroup()
                .addComponent(lblSolicitudesAmizade)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addGroup(panelSolicitudesAmizadeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRexeitarSolicitude)
                    .addComponent(btnNovaSolicitude)
                    .addComponent(btnAceptarSolicitude))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnRexeitarSolicitude.getAccessibleContext().setAccessibleDescription("");

        SplitPaneAmigos.setRightComponent(panelSolicitudesAmizade);

        lblListaDeAmigos.setText("Lista de amig@s:");

        tablaListaAmigos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nome", "Estado"
            }
        ));
        jScrollPane4.setViewportView(tablaListaAmigos);

        btnVerBiografia.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/post-it-150262_640.png"))); // NOI18N
        btnVerBiografia.setText("Ver biografía");
        btnVerBiografia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVerBiografiaActionPerformed(evt);
            }
        });

        btnEnviarMensaxePrivada.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/letter-2935365_640.png"))); // NOI18N
        btnEnviarMensaxePrivada.setText("Enviar mensaxe privada");
        btnEnviarMensaxePrivada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnviarMensaxePrivadaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSuperiorAmigosLayout = new javax.swing.GroupLayout(panelSuperiorAmigos);
        panelSuperiorAmigos.setLayout(panelSuperiorAmigosLayout);
        panelSuperiorAmigosLayout.setHorizontalGroup(
            panelSuperiorAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
            .addGroup(panelSuperiorAmigosLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblListaDeAmigos)
                .addGap(834, 845, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSuperiorAmigosLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(btnVerBiografia)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEnviarMensaxePrivada)
                .addGap(245, 245, 245))
        );
        panelSuperiorAmigosLayout.setVerticalGroup(
            panelSuperiorAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSuperiorAmigosLayout.createSequentialGroup()
                .addComponent(lblListaDeAmigos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSuperiorAmigosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEnviarMensaxePrivada)
                    .addComponent(btnVerBiografia))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        SplitPaneAmigos.setTopComponent(panelSuperiorAmigos);

        tabbedPaneMenu.addTab("Amig@s", new javax.swing.ImageIcon(getClass().getResource("/assets/people-35681_640.png")), SplitPaneAmigos); // NOI18N

        lblMensaxesPrivadas.setText("Mensaxes privadas:");

        tablaMensajes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lida", "Data", "De", "Texto"
            }
        ));
        jScrollPane6.setViewportView(tablaMensajes);

        btnEliminarMensaxe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/reject.png"))); // NOI18N
        btnEliminarMensaxe.setText("Eliminar mensaxe");
        btnEliminarMensaxe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarMensaxeActionPerformed(evt);
            }
        });

        btnLerMensaxe.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/email-2935508_640.png"))); // NOI18N
        btnLerMensaxe.setText("Ler mensaxe");
        btnLerMensaxe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLerMensaxeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelMensaxesPrivadasLayout = new javax.swing.GroupLayout(panelMensaxesPrivadas);
        panelMensaxesPrivadas.setLayout(panelMensaxesPrivadasLayout);
        panelMensaxesPrivadasLayout.setHorizontalGroup(
            panelMensaxesPrivadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMensaxesPrivadasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6))
            .addGroup(panelMensaxesPrivadasLayout.createSequentialGroup()
                .addComponent(lblMensaxesPrivadas)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMensaxesPrivadasLayout.createSequentialGroup()
                .addContainerGap(308, Short.MAX_VALUE)
                .addComponent(btnLerMensaxe)
                .addGap(31, 31, 31)
                .addComponent(btnEliminarMensaxe)
                .addGap(304, 304, 304))
        );
        panelMensaxesPrivadasLayout.setVerticalGroup(
            panelMensaxesPrivadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMensaxesPrivadasLayout.createSequentialGroup()
                .addComponent(lblMensaxesPrivadas)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelMensaxesPrivadasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEliminarMensaxe)
                    .addComponent(btnLerMensaxe))
                .addGap(18, 18, 18))
        );

        tabbedPaneMenu.addTab("Mensaxes Privadas", new javax.swing.ImageIcon(getClass().getResource("/assets/chat-1873536_640.png")), panelMensaxesPrivadas); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(112, 112, 112)
                        .addComponent(lblPerfilDoUsuario)
                        .addGap(119, 119, 119)
                        .addComponent(lblLogoTacebook)
                        .addGap(106, 106, 106)
                        .addComponent(lblEstadoActual))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(310, 310, 310)
                        .addComponent(btnCambiarEstado)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPecharSesion))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(tabbedPaneMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 975, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblPerfilDoUsuario)
                    .addComponent(lblLogoTacebook)
                    .addComponent(lblEstadoActual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPaneMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 484, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCambiarEstado)
                    .addComponent(btnPecharSesion))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPecharSesionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPecharSesionActionPerformed
        // BOTÓN DE CERRAR SESIÓN
        dispose();
        GUIInitMenuView guiimv = new GUIInitMenuView(new InitMenuController(false));
        guiimv.showLoginMenu();
    }//GEN-LAST:event_btnPecharSesionActionPerformed

    private void btnNovaSolicitudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaSolicitudeActionPerformed
        // BOTÓN DE NUEVA SOLICITUD DE AMISTAD
    }//GEN-LAST:event_btnNovaSolicitudeActionPerformed

    private void btnNovaPublicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaPublicacionActionPerformed
        // BOTÓN DE NUEVA PUBLICACIÓN
//        String newStatus = JOptionPane.showInputDialog(null, "Ingrese una nueva publicación:");
//        Scanner scan = new Scanner(newStatus);
//        writeNewPost(scan, profileController.getSessionProfile());
//        showProfileInfo(true, profileController.getSessionProfile());

        /**
         * public void newPost(String text, Profile destProfile): Crea un novo
         * obxecto "Post", chama á clase "PostDB" para gardalo e chama ao método
         * "reloadProfile" para refrescar a información do perfil.
         */
        String postText = JOptionPane.showInputDialog("Introduce aqui la publicación.", "");
        if (!postText.isBlank()) {
            profileController.newPost(postText, profileController.getSessionProfile());
        } else {
            JOptionPane.showMessageDialog(this, "Debes introducir un texto para la publicación!",
                    "Error", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnNovaPublicacionActionPerformed

    private void btnComentarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnComentarActionPerformed
        // BOTÓN DE CREAR COMENTARIO
    }//GEN-LAST:event_btnComentarActionPerformed

    private void btnGustameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGustameActionPerformed
        // BOTÓN DE DAR LIKE
        addLike(null, profileController.getSessionProfile());
    }//GEN-LAST:event_btnGustameActionPerformed

    private void btnVerPublicacionesAnterioresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerPublicacionesAnterioresActionPerformed
        // BOTÓN DE VER PUBLICACIONES ANTERIORES

        postsShowed = Integer.parseInt(JOptionPane.showInputDialog(null, "Ingrese a cantidade máxima de posts a mostrar:"));
        lblUltimasPublicacions.setText(postsShowed + " últimas publicacións");
        showProfileInfo(false, profileController.getSessionProfile());

    }//GEN-LAST:event_btnVerPublicacionesAnterioresActionPerformed

    private void btnVerBiografiaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVerBiografiaActionPerformed
        // BOTÓN DE VER BIOGRAFÍA DE UN AMIGO SELECCIONADO
    }//GEN-LAST:event_btnVerBiografiaActionPerformed

    private void btnEnviarMensaxePrivadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnviarMensaxePrivadaActionPerformed
        // BOTÓN DE ENVIAR MENSAJE PRIVADO A UN AMIGO SELECCIONADO
    }//GEN-LAST:event_btnEnviarMensaxePrivadaActionPerformed

    private void btnAceptarSolicitudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarSolicitudeActionPerformed
        // BOTÓN DE ACEPTAR SOLICITUD DE AMISTAD
    }//GEN-LAST:event_btnAceptarSolicitudeActionPerformed

    private void btnRexeitarSolicitudeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRexeitarSolicitudeActionPerformed
        // BOTÓN DE RECHAZAR SOLICITUD DE AMISTAD
    }//GEN-LAST:event_btnRexeitarSolicitudeActionPerformed

    private void btnCambiarEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCambiarEstadoActionPerformed
        // BOTÓN DE CAMBIAR ESTADO

        String newStatus = JOptionPane.showInputDialog(null, "Ingrese un nuevo estado:");
        profileController.updateProfileStatus(newStatus);

    }//GEN-LAST:event_btnCambiarEstadoActionPerformed

    private void btnLerMensaxeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLerMensaxeActionPerformed
        // BOTÓN DE LEER MENSAJE PRIVADO
    }//GEN-LAST:event_btnLerMensaxeActionPerformed

    private void btnEliminarMensaxeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarMensaxeActionPerformed
        // BOTÓN DE ELIMINAR MENSAJE PRIVADO
    }//GEN-LAST:event_btnEliminarMensaxeActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(GUIProfileMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(GUIProfileMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(GUIProfileMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(GUIProfileMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                // new GUIProfileMenu().setVisible(true);
//            }
//        });
//    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSplitPane SplitPaneAmigos;
    private javax.swing.JButton btnAceptarSolicitude;
    private javax.swing.JButton btnCambiarEstado;
    private javax.swing.JButton btnComentar;
    private javax.swing.JButton btnEliminarMensaxe;
    private javax.swing.JButton btnEnviarMensaxePrivada;
    private javax.swing.JButton btnGustame;
    private javax.swing.JButton btnLerMensaxe;
    private javax.swing.JButton btnNovaPublicacion;
    private javax.swing.JButton btnNovaSolicitude;
    private javax.swing.JButton btnPecharSesion;
    private javax.swing.JButton btnRexeitarSolicitude;
    private javax.swing.JButton btnVerBiografia;
    private javax.swing.JButton btnVerPublicacionesAnteriores;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JTable jTable2;
    private javax.swing.JLabel lblEstadoActual;
    private javax.swing.JLabel lblListaDeAmigos;
    private javax.swing.JLabel lblLogoTacebook;
    private javax.swing.JLabel lblMensaxesPrivadas;
    private javax.swing.JLabel lblPerfilDoUsuario;
    private javax.swing.JLabel lblSolicitudesAmizade;
    private javax.swing.JLabel lblUltimasPublicacions;
    private javax.swing.JList<String> listaSolicitudesAmizade;
    private javax.swing.JPanel panelBiografia;
    private javax.swing.JPanel panelComentarios;
    private javax.swing.JPanel panelMensaxesPrivadas;
    private javax.swing.JPanel panelSolicitudesAmizade;
    private javax.swing.JPanel panelSuperiorAmigos;
    private javax.swing.JSplitPane splitPaneBiografia;
    private javax.swing.JTabbedPane tabbedPaneMenu;
    private javax.swing.JTable tablaListaAmigos;
    private javax.swing.JTable tablaMensajes;
    private javax.swing.JTable tableBiografia;
    // End of variables declaration//GEN-END:variables

    /**
     * Getter del atributo postsShowed
     *
     * @return postsShowed
     */
    @Override
    public int getPostsShowed() {
        return postsShowed;
    }

    /**
     * Setter del atributo postsShowed
     *
     * @param postsShowed cantidad de posts a mostrar
     */
    public void setPostsShowed(int postsShowed) {
        this.postsShowed = postsShowed;
    }

    /**
     * Este método muestea la información completa del perfil de un usuario,
     * tanto si es en su perfil o no
     *
     * @param ownProfile si está en su perfil o no
     * @param profile el perfil que muesta la información
     *
     */
    private void showProfileInfo(boolean ownProfile, Profile profile) {
        setVisible(true);
        if (ownProfile) {
            lblPerfilDoUsuario.setText("Perfil do usuario: " + profile.getName());
            lblEstadoActual.setText("Estado actual: " + profile.getStatus());
        } else {
            lblPerfilDoUsuario.setText("Perfil do usuario: " + profile.getName());
            lblEstadoActual.setText("Estado actual: " + profile.getStatus());
        }

        /**
         * CHECK POINT DEL ULTIMO DIA QUE TOCAMOS CODIGO, YA SE CAMBIAN LAS
         * LABELS Y AHORA FALTA CONSEGUIR HACER QUE SE CARGUEN LAS TABLAS ETC
         * ETC ETC ETC MI POLLA
         */
        DefaultTableModel model = (DefaultTableModel) tableBiografia.getModel();
        model.setRowCount(0); // Elimina todas las filas

        int numPosts = profile.getPosts().size();
        int startIndex = Math.max(0, numPosts - postsShowed); // Índice de inicio para mostrar los posts

        for (int i = startIndex; i < numPosts; i++) {
            Object[] fila = new Object[4];
            fila[0] = profile.getPosts().get(i).getDate();
            fila[1] = profile.getPosts().get(i).getAuthor().getName();
            fila[2] = profile.getPosts().get(i).getText();
            fila[3] = profile.getPosts().get(i).getProfileLikes().size();
            model.addRow(fila);

//
//        if (ownProfile) {
//            System.out.println("[A tua biografia] " + this.postsShowed + " ultimas publicacions");
//        } else {
//            System.out.println("[Biografia de " + profile.getName() + "] " + this.postsShowed + " ultimas publicacions");
//        }
//        // Bucle for para los posts
//        for (int i = 0; i < this.postsShowed && i < profile.getPosts().size(); i++) {
//            Post post = profile.getPosts().get(i);
//            System.out.println("" + i + "." + post.getId()
//                    + " [" + this.formatter.format(post.getDate()) + "]"
//                    + " (" + post.getProfileLikes().size() + " me gusta) ");
//            System.out.println("----- " + post.getText());
//            if (post.getAuthor().getName().equals(this.profileController.getSessionProfile().getName())) {
//                System.out.println("ti escribiches");
//            } else {
//                System.out.println(" " + post.getAuthor().getName() + " escribiu");
//            }
//            // Bucle for mejorado para los comentarios
//            for (Comment comment : post.getComments()) {
//                System.out.println("  [" + comment.getText()
//                        + " - " + comment.getSourceProfile().getName()
//                        + " - "
//                        + this.formatter.format(comment.getDate())
//                        + "]");
//            }
//        }
//        System.out.println("Amigos engadidos:");
//        // Bucle for para los amigos
//        for (int i = 0; i < profile.getFriends().size(); i++) {
//            System.out.println("" + i + ". " + profile.getFriends().get(i).getName());
//            System.out.println("O seu estado e " + profile.getFriends().get(i).getStatus());
//        }
//        if (ownProfile) {
//
//            if (!profile.getMessages().isEmpty()) {
//                System.out.println("[Mensaxes privados]");
//                int msgNoLeidos = 0;
//                // Bucle for para saber cuantos mensajes tiene el perfil sin leer
//                for (Message message : profile.getMessages()) {
//                    if (!message.isRead()) {
//                        msgNoLeidos++;
//                    }
//                }
//                if (msgNoLeidos > 0) {
//                    System.out.println("Tes " + msgNoLeidos + " mensaxes sin ler");
//                }
//                // Bucle for para los mensajes
//                for (int i = 0; i < profile.getMessages().size(); i++) {
//                    Message message = profile.getMessages().get(i);
//                    if (!message.isRead()) {
//                        System.out.println("[!]");
//                    }
//                    System.out.println("" + i + ". De " + i);
//                    System.out.println("[" + this.formatter.format(message.getDate()) + "]");
//
//                    // Muestra el texto del mensaje de forma resumida
//                    System.out.println(message.getText().substring(0, Math.min(10, message.getText().length() - 1)) + "...");
//                }
//            }
//
//            if (!profile.getFriendshipRequests().isEmpty()) {
//                System.out.println("Tes as seguintes peticions de amistade:");
//                // Bucle for para las solicitudes de amistad
//                for (int i = 0; i < profile.getFriendshipRequests().size(); i++) {
//                    System.out.println("" + i + ". " + profile.getFriendshipRequests().get(i).getName());
//                    System.out.println(" Quere establecer unha amistade contigo");
//                }
//            }
//        }
        }
    }

    /**
     * Este método permite que el usuario cambie de estado. Si own profile es
     * false, avisará que el estado solo se puede cambiar en su propia biografia
     *
     * @param ownProfile si está en su perfil o no
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que cambia el estado
     */
    private void changeStatus(boolean ownProfile, Scanner scanner, Profile profile) {
        /*
        Si ownprofile es true, indica que el usuario está intentando cambiar su 
        propio estado, por lo cual el método sacará un scanner pidiendo los 
        datos.
         */
        if (ownProfile) {
            System.out.println("Actualiza o teu estado: ");
            String newStatus = scanner.next();
            profileController.updateProfileStatus(newStatus);
        } else {
            /*
            Si own profile es false, avisará que el estado solo se puede cambiar
            en su propia biografia.
             */
            System.out.println("Esta opcion so se pode utilizar no teu propio perfil");
            showProfileMenu(profile);
        }
    }

    /**
     * Este método llama al método showProfileInfo y entrega opciones al usuario
     *
     * @param profile el perfil al que se entrega las opciones
     */
    @Override
    public void showProfileMenu(Profile profile) {
        Scanner scan = new Scanner(System.in);
        boolean ownProfile = this.profileController.getSessionProfile().getName().equals(profile.getName());
        showProfileInfo(ownProfile, profile);
        int select;

        System.out.println("");
        System.out.println("Selecciona unha opcion:");
        System.out.println("1. Escribir unha nova publicacion");
        System.out.println("2. Comentar unha publicacion");
        System.out.println("3. Facer me gusta sobre unha publicacion");

        // Condición if si el perfil está en su propio perfil o no
        if (ownProfile) {
            System.out.println("4. Ver a biografia dun amigo");
            System.out.println("5. Enviar unha solicitude de amizade");
            System.out.println("6. Aceptar unha solicitude de amizade");
            System.out.println("7. Rexeitar unha solicitude de amizade");
            System.out.println("8. Enviar unha mensaxe privada a un amigo");
            System.out.println("9. Ler unha mensaxe privada");
            System.out.println("10. Eliminar unha mensaxe privada");
            System.out.println("11. Ver publicacions anteriores");
            System.out.println("12. Cambiar o estado");
            System.out.println("13. Pechar a sesion");
        } else {
            System.out.println("4. Volver á miña biografía");
            System.out.println("8. Enviar unha mensaxe privada");
            System.out.println("11. Ver publicacions anteriores");
            System.out.println("13. Pechar a sesion");
        }
    }

    /**
     * Este método pide al usuario un numero y lo devuelve
     *
     * @param text el texto que se muestra
     * @param maxNumber el número máximo para localizar
     * @param scanner el scanner que se utiliza
     * @return Devuelve un número introducido por el usuario
     */
    private int selectElement(String text, int maxNumber, Scanner scanner) {
        int index;
        do {
            System.out.println(text);
            index = readNumber(scanner);
            if (index < 0 || index > maxNumber - 1) {
                System.out.println("Debes introducir un numero entre 0 e " + (maxNumber - 1));
            }
        } while (index < 0 || index > maxNumber - 1);

        return index;
    }

    /**
     * Este método pide el texto para crear una nueva publicacion
     *
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que escribe el post
     */
    private void writeNewPost(Scanner scanner, Profile profile) {
        System.out.println("Escribe o texto da publicacion:");
        String text = scanner.nextLine();
        this.profileController.newPost(text, profile);
    }

    /**
     * Este método introduce un comentario en un post
     *
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que escribe el comentario
     */
    private void commentPost(Scanner scanner, Profile profile) {
        if (profile.getPosts().isEmpty()) {
            System.out.println("Non hai ningun post :(");
            showProfileMenu(profile);
        } else {
            int postCommentNum = selectElement("Introduce o numero do post que queres comentar", Math.min(profile.getPosts().size(), this.postsShowed), scanner);
            Post commentedPost = profile.getPosts().get(postCommentNum);
            System.out.println("Escribe o comentario que deseas engadir:");
            scanner.nextLine();
            String commentTxt = scanner.nextLine();
            this.profileController.newComment(commentedPost, commentTxt);
        }
    }

    /**
     * Este método hace que a una publicición un usuario le de like
     *
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que da like
     */
    private void addLike(Scanner scanner, Profile profile) {
        profileController.newLike(profileController.getSessionProfile().getPosts().get(jTable2.getSelectedRow() + 1));
    }

    /**
     * Este método muestra el perfil de una amistad del perfil si está viendo su
     * porpio perfil o muestra el perfil que está viendo
     *
     * @param ownProfile si está en su perfil o no
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que muestra la biografía
     */
    private void showBiography(boolean ownProfile, Scanner scanner, Profile profile) {
        if (ownProfile) {
            if (profile.getFriends().isEmpty()) {
                System.out.println("Todavia non tes ningun amigo engadido :(");
                showProfileMenu(profile);
            } else {
                int friendNum = selectElement("Introduce o numero do amigo do que queres ver a biografia", profile.getFriends().size(), scanner);
                this.profileController.setShownProfile(profile.getFriends().get(friendNum));
            }
        } else {
            this.profileController.setShownProfile(this.profileController.getSessionProfile());
        }
    }

    /**
     * Este método permite enviar una solicitud de amistad
     *
     * @param ownProfile si está en su perfil o no
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que muestra la biografía
     *
     */
    private void sendFriendshipRequest(boolean ownProfile, Scanner scanner, Profile profile) {
        if (ownProfile) {
            System.out.println("Introduce o nome do perfil que queres enviar pedido de amistade");
            String profileUser = scanner.nextLine();
            System.out.println("---> Has enviado unha solicitude de amizade a " + profileUser);
            this.profileController.newFriendshipRequest(profileUser);
        } else {
            System.out.println("Esta opcion so se pode utilizar na tua biografia");
            showProfileMenu(profile);
        }
    }

    /**
     * Este método pide el número de la solicitud de amistad para aceptarla o
     * rechazarla
     *
     * @param ownProfile si está en su perfil o no
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que recibe la solicitud de amistad
     * @param accept true para aceptar la solicitud o false para rechazarla
     */
    private void proccessFriendshipRequest(boolean ownProfile, Scanner scanner, Profile profile, boolean accept) {

        if (ownProfile) {
            if (profile.getFriendshipRequests().isEmpty()) {
                System.out.println("Non tes ningunha solicitude de amizade pendente");
                showProfileMenu(profile);
            } else {
                int pedidoAmistadNumber = selectElement("Introduce o numero da solicitude que queres selecionar", profile.getFriendshipRequests().size(), scanner);
                if (accept) {
                    System.out.println("---> Has aceptado a solicitude de amizade");
                    this.profileController.acceptFriendshipRequest(profile.getFriendshipRequests().get(pedidoAmistadNumber));
                } else {
                    System.out.println("---> Has rechazado a solicitude de amizade");
                    this.profileController.rejectFriendshipRequest(profile.getFriendshipRequests().get(pedidoAmistadNumber));
                }
            }
        } else {
            System.out.println("So podes modificar o teu propio perfil");
            showProfileMenu(profile);
        }
    }

    /**
     * Este método envia un mensaje privado a una amistad
     *
     * @param ownProfile si está en su perfil o no
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que envia el mensaje
     */
    private void sendPrivateMessage(boolean ownProfile, Scanner scanner, Profile profile) {
        Profile destProfile = null;
        if (ownProfile) {
            if (profile.getFriends().isEmpty()) {
                System.out.println("A tua lista de amigos esta vacia :(");
                showProfileMenu(profile);
                return;
            }
            int numAmg = selectElement("Introduce o numero do amigo que desear enviar un mensaxe", profile.getFriends().size(), scanner);
            destProfile = profile.getFriends().get(numAmg);
        }
        System.out.println("Introduce o texto da mensaxe:");
        String msgTxt = scanner.nextLine();
        this.profileController.newMessage(destProfile, msgTxt);
    }

    /**
     * Este método pide al usuario que seleccione un mensaje y muestra el
     * mensaje completo, dando las opciones de responderlo, eliminarlo o
     * simplemente volver a la biografia marcando el mensaje como leido
     *
     * @param ownProfile si está en su perfil o no
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que modifica el mensaje
     */
    private void readPrivateMessage(boolean ownProfile, Scanner scanner, Profile profile) {
        if (ownProfile) {
            if (profile.getMessages().isEmpty()) {
                System.out.println("Non tes ningun mensaxe :(");
                showProfileMenu(profile);
            } else {
                String msgTxt;
                int msgNum = selectElement("Introduce o numero da mensaxe que queres ler", profile.getMessages().size(), scanner);
                Message msg = profile.getMessages().get(msgNum);

                // Muestra el mensaje seleccionado
                System.out.println("---------------");
                System.out.println("Mensaxe privado");
                System.out.println("De: " + msg.getSourceProfile().getName());
                System.out.println("Data:" + this.formatter.format(msg.getDate()));
                System.out.println("Texto: ");
                System.out.println(msg.getText());
                System.out.println();
                System.out.println("Elixe unha opcion:");
                System.out.println("1. Contestar o mensaxe");
                System.out.println("2. Eliminar o mensaxe");
                System.out.println("3. Marcar como lida a mensaxe e volver a biografia");
                int option = scanner.nextInt();
                scanner.nextLine();

                switch (option) {
                    case 1:
                        System.out.println("Escribe o mensaxe:");
                        msgTxt = scanner.nextLine();
                        this.profileController.replyMessage(msg, msgTxt);
                        return;

                    case 2:
                        this.profileController.deleteMessage(msg);
                        return;

                    case 3:
                        this.profileController.markMessageAsRead(msg);
                        return;
                }

                System.out.println("Introduce un numero de 1 a 3");
                showProfileMenu(profile);
            }
        } else {
            System.out.println("So podes utilizar esta opcion na tua biografia");
            showProfileMenu(profile);
        }
    }

    /**
     * Este método permite borrar un mensaje
     *
     * @param ownProfile si está en su perfil o no
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que borra el mensaje
     */
    private void deletePrivateMessage(boolean ownProfile, Scanner scanner, Profile profile) {
        if (ownProfile) {
            if (profile.getMessages().isEmpty()) {
                System.out.println("Non tes mensaxes :(");
                showProfileMenu(profile);
            } else {
                int msgSelect = selectElement("Introduce o numero da mensaxe que desexas eliminar", profile.getMessages().size(), scanner);
                profileController.deleteMessage(profile.getMessages().get(msgSelect));
            }
        } else {
            System.out.println("So podes configurar o teu propio perfil");
            showProfileMenu(profile);
        }
    }

    /**
     * Este método pregunta al usuario el número de posts a visualizar y recarga
     * el perfil
     *
     * @param scanner el scanner que se utiliza
     * @param profile el perfil que modifica el número de posts
     */
    private void showOldPosts(Scanner scanner, Profile profile) {
        System.out.println("Introduce o numero de publicacions a visualizar");
        int number = scanner.nextInt();
        postsShowed = number;
        this.profileController.reloadProfile();
    }

    /**
     * Este método muestra un mensaje al usuario sobre que no se encontro un
     * perfil
     */
    @Override
    public void showProfileNotFoundMessage() {
        System.out.println("O perfil que estas intentando buscar non existe");
    }

    /**
     * Este método muestra un mensaje al usuario sobre que no puedes dar like a
     * tu proia publicación
     */
    @Override
    public void showCannotLikeOwnPostMessage() {
        JOptionPane.showMessageDialog(null, "Non podes dar like a tua propia publicacion", "ERROR", JOptionPane.ERROR_MESSAGE);
    }

    /**
     * Este método muestra un mensaje al usuario sobre que no es posible dar
     * like a una publicación que ya distes
     */
    @Override
    public void showAlreadyLikedPostMessage() {
        System.out.println("Non e posible dar like a unha publicacion que xa diste like");
    }

    /**
     * Este método muestra un mensaje al usuario sobre que ya eres amigo de
     * profileName
     *
     * @param profileName nombre de la persona
     */
    @Override
    public void showIsAlreadyFriendMessage(String profileName) {
        System.out.println("Xa eres amigo de " + profileName);
    }

    /**
     * Este método muestra un mensaje al usuario sobre que ya tienes enviada una
     * solicitud de amistad a profileName
     *
     * @param profileName nombre de la persona
     */
    @Override
    public void showExistsFrienshipRequestMessage(String profileName) {
        System.out.println("Xa tes unha solicitude de amizade enviada a " + profileName);
    }

    /**
     * Este método muestra un mensaje al usuario sobre que ya tienes una
     * solicitud de amistad con profileName
     *
     * @param profileName nombre de la persona
     */
    @Override
    public void showDuplicateFrienshipRequestMessage(String profileName) {
        System.out.println("Xa tes unha peticion de amizade con " + profileName);
    }

    /**
     * Este método muestra un error de conexión con el almacen de datos
     */
    @Override
    public void showConnectionErrorMessage() {
        System.out.println("Erro na conexion co almacen de datos!");
    }

    /**
     * Este método muestra un error de lectura de datos
     */
    @Override
    public void showReadErrorMessage() {
        System.out.println("Erro na lectura de datos!");
    }

    /**
     * Este método muestra un error de escritura de los datos
     */
    @Override
    public void showWriteErrorMessage() {
        System.out.println("Erro na escritura dos datos!");
    }

    /**
     * Este método lee un numero y si no es un numero se vuelve a llamar a sí
     * mismo
     *
     * @param scanner el scanner que se utiliza
     * @return Devuelve un número una vez comprobado que es un número
     */
    private int readNumber(Scanner scanner) {
        int number;
        try {
            number = scanner.nextInt();
            scanner.nextLine();
        } catch (NoSuchElementException e) {
            System.out.println("Debes introducir un numero");
            scanner = new Scanner(System.in);
            return readNumber(scanner); // Llamada recursiva para leer nuevamente
        }
        return number;
    }
}
